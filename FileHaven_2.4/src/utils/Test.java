package utils;

import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.io.FileOutputStream;
import java.util.Date;

import org.jfree.chart.JFreeChart;

import com.itextpdf.awt.DefaultFontMapper;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;

public class Test {
	
	  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
		      Font.BOLD);
		  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
		      Font.NORMAL, BaseColor.RED);
		  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
		      Font.BOLD);
		  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
		      Font.BOLD);
	
	public static void main(String[] args) {
	    writeChartToPDF(PieChartDemo.generatePieChart(), 500, 400, "C://temp//piechart.pdf");
	}
	
	 
	
	 private static void addEmptyLine(Paragraph paragraph, int number) {
		    for (int i = 0; i < number; i++) {
		      paragraph.add(new Paragraph(" "));
		    }
		  }
	public static void writeChartToPDF(JFreeChart chart, int width, int height, String fileName) {
	    PdfWriter writer = null;
	 
	    Document document = new Document();
	 
	    try {
	        writer = PdfWriter.getInstance(document, new FileOutputStream(
	                fileName));
	        document.open();
	        document.addTitle("My first PDF");
	        document.addSubject("Using iText");
	        document.addKeywords("Java, PDF, iText");
	        document.addAuthor("Lars Vogel");
	        document.addCreator("Lars Vogel");
	        
	        Paragraph preface = new Paragraph();
	        preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		            smallBold));
	        addEmptyLine(preface, 1);
	        preface.add(new Paragraph("This document describes something which is very important ",
	            smallBold));
	        // We add one empty line
	        addEmptyLine(preface, 1);
	        // Lets write a big header
	        preface.add(new Paragraph("File Report", catFont));
	        preface.add(new Paragraph("Department: Software ",
		            smallBold));
	        preface.add(new Paragraph("Company: Hewlett Packard ",
		            smallBold));
	        
	        addEmptyLine(preface, 1);
	        // Will create: Report generated by: _name, _date
	       
	        


	        preface.add(new Paragraph("User's who accessed the department Files",
	            redFont));
	        addEmptyLine(preface, 1);
	        document.add(preface);
	        
	        PdfPTable table = new PdfPTable(4);

	        // t.setBorderColor(BaseColor.GRAY);
	        // t.setPadding(4);
	        // t.setSpacing(4);
	        // t.setBorderWidth(1);

	        PdfPCell c1 = new PdfPCell(new Phrase("File Name"));
	        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c1);

	        c1 = new PdfPCell(new Phrase("Name/IPAddress"));
	        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c1);
	        	
	        c1 = new PdfPCell(new Phrase("Access Date"));
	        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c1);
	        
	        c1 = new PdfPCell(new Phrase("Access Time"));
	        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c1);
	        table.setHeaderRows(1);

	        table.addCell("timetable1.jpg");
	        table.addCell("lewis/192.168.1.1");
	        table.addCell("2013-12-30");
	        table.addCell("10:58:40");
	        table.addCell("timetable1.jpg");
	        table.addCell("lewis/192.168.1.3");
	        table.addCell("2013-12-30");
	        table.addCell("10:58:40");
	        table.addCell("timetable2.jpg");
	        table.addCell("alonso/192.168.1.4");
	        table.addCell("2013-12-30");
	        table.addCell("12:58:40");
	        
	      
	        
	        document.add(table);		

	       
	        
	        PdfContentByte contentByte = writer.getDirectContent();
	        PdfTemplate template = contentByte.createTemplate(width, height);
	        Graphics2D graphics2d = template.createGraphics(width, height,
	                new DefaultFontMapper());
	        Rectangle2D rectangle2d = new Rectangle2D.Double(0, 0, width,
	                height);
	 
	        chart.draw(graphics2d, rectangle2d);
	         
	        graphics2d.dispose();
	        contentByte.addTemplate(template, 0, 0);
	        
	        
	 
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    document.close();
	}

	
}
